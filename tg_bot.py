#!/usr/bin/python

import os
import django
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "sag.settings")
os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
django.setup()

import logging
import requests
import keyboards as kb
# from sqlither import SQLighter
from aiogram import Bot, Dispatcher, executor, types
from environs import Env
from mainapp.models import *

env = Env()
env.read_env()

logging.basicConfig(level=logging.INFO)

bot = Bot(token=env('API_TOKEN'))
dp = Dispatcher(bot)


# db = SQLighter('db.sqlite3')


@dp.message_handler(commands=['start', ])
async def send_welcome(message: types.Message):
    await message.reply('–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç Telegram-–±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ SAG Gilamlari', reply_markup=kb.start_kb)


@dp.message_handler()
async def echo(message: types.Message):
    sent_answer = False
    # cities = db.get_cities()
    cities = City.objects.all()
    # dealers = db.get_dealers()
    dealers = Dealer.objects.all()
    # collections = db.get_collections()
    collections = Collection.objects.all()
    # sub_collections = db.get_sub_collections()
    sub_collections = SubCollection.objects.all()
    for collection in collections:
        if message.text == collection.name:
            # if collection['has_sub'] == 1:
            sent_answer = True
            text = '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é ' + collection.name
            await message.answer(text, reply_markup=kb.get_sub_collections_kb(collection.id))
            # else:
            # sent_answer = True
            # await message.answer(collection.link)
    for sub_collection in sub_collections:
        if message.text == sub_collection.name:
            sent_answer = True
            await message.answer(sub_collection.link)
    for city in cities:
        if message.text in city.name:
            text = ''
            for dealer in dealers:
                if dealer.city_id == city.id:
                    text += dealer.name + '\nüìç –ê–¥—Ä–µ—Å: ' + dealer.address
                    text += '\n‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: ' + dealer.phone + '\n\n'
            sent_answer = True
            await message.answer(text)
    if sent_answer is False:
        if message.text == 'üèû –ö–∞—Ç–∞–ª–æ–≥':
            # check = db.check_user(message.chat.id)
            ChatUser.objects.get_or_create(user_id=message.chat.id)
            # if not check:
            #     db.create_user(message.chat.id)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–ª–µ–∫—Ü–∏—é', reply_markup=kb.get_collections_kb(message))
        elif message.text == 'üè¢ –î–∏–ª–ª–µ—Ä—ã':
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ì–æ—Ä–æ–¥', reply_markup=kb.get_dealers_kb())
        elif message.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã':
            text = 'üìç –ê–¥—Ä–µ—Å:\n          —É–ª. –°–ø–∏—Ç–∞–º–µ–Ω—à–æ—Ö 270 ( –û—Ä–∏–µ–Ω—Ç–∏—Ä: –õ–∏—Ñ—Ç–æ—Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–≤–æ–¥ )\n\n'
            text += '‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω:\n          +998 (95) 500-72-72\n\nüñ• –°–∞–π—Ç:\nhttps://sag.uz'
            await message.answer(text)
        elif message.text == 'üè† –ì–ª–∞–≤–Ω–æ–µ –ú–µ–Ω—é':
            await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=kb.start_kb)
        else:
            await message.answer('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º', reply_markup=kb.start_kb)


def send_sms_to_users_collections(collection_obj):
    text = f"        ‚ùóÔ∏è–ù–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è ‚ùó        \n"
    text += f"\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: \n        {collection_obj.name}\n"
    text += f"\n–°—Å—ã–ª–∫–∞: \n        {collection_obj.link}\n"
    text += f"\nüèû–ö–∞—Ç–µ–≥–æ—Ä–∏—è: \n        {collection_obj.collection}\n"
    users = ChatUser.objects.all()
    for user in users:
        requests.get(f"https://api.telegram.org/bot{env('API_TOKEN')}/sendMessage?chat_id={user.user_id}&text={text}")
    print(text)
    return


if __name__ == '__main__':
    executor.start_polling(dp)
